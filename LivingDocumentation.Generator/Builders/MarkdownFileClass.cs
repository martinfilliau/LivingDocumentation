using System.Text;
using LivingDocumentation.Generator.Models;

namespace LivingDocumentation.Generator.Builders;

public class MarkdownFileClass
{
    public static string BuildCSharpClassWithMarkdown(IEnumerable<RefactorInfo?> refactorInfos)
    {
        var builder = new StringBuilder("# Refactoring Documentation\n\n");

        foreach (var info in refactorInfos)
        {
            if (info is null) continue;
                
            builder.AppendLine($"## {info.SymbolName}");
            builder.AppendLine($"- **Reason:** {info.Reason}");
            builder.AppendLine($"- **File:** {info.FilePath}\n");
        }
            
        // Wrap the Markdown content in a C# class
        var sourceCode = $@"// <auto-generated/>
using System;

namespace LivingDocumentation
{{
    public static class GeneratedDocs
    {{
        /// <summary>
        /// Contains the generated Markdown documentation
        /// </summary>
        public const string RefactoringDocumentation = @""
{builder}
"";

        /// <summary>
        /// Saves the documentation to a file
        /// </summary>
        /// <param name=""path"">The path where to save the documentation</param>
        public static void SaveRefactoringDocumentation(string path)
        {{
            System.IO.File.WriteAllText(path, RefactoringDocumentation, System.Text.Encoding.UTF8);
        }}
    }}
}}";

        return sourceCode;
    }
}